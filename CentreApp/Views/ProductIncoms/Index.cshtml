

@{
    ViewData["Title"] = "История прихода";
    var DropDownList = new Syncfusion.EJ2.DropDowns.DropDownList() { AllowFiltering = true, PopupHeight = "200px", Placeholder = "Выберите", ShowClearButton = true };


}
@model ProductIncoms
<div class="h3" style="margin:40px 40px 20px 40px">История прихода</div>
<div class="container-fluid">

<div class="row ml-2">
    <div class="col" style="margin-top:40px">
        <ejs-dropdownlist id="Prsfs" showClearButton="true" allowFiltering="true" placeholder="Выберите тип" popupHeight="260px" dataSource="@(new Syncfusion.EJ2.DataManager() { Url = "/Producttype/ForDropDown", Adaptor = "UrlAdaptor"})">
            <e-dropdownlist-fields text="Name" value="Id"></e-dropdownlist-fields>
        </ejs-dropdownlist>
    </div>
    <div class="col-12 col-md-3">
        <ejs-numerictextbox min="0" id="incmm" placeholder="Цена прихода" showClearButton="true" floatLabelType="Always"></ejs-numerictextbox>
    </div>
    <div class="col-12 col-md-2">
        <ejs-numerictextbox min="0" id="rzncst" placeholder="Цена продажи (приход+%)" showClearButton="true" floatLabelType="Always"></ejs-numerictextbox>
    </div>
    <div class="col-12 col-md-2">
        <ejs-numerictextbox min="0" id="optcst" placeholder="Оптовая цена (приход+%)" showClearButton="true" floatLabelType="Always"></ejs-numerictextbox>
    </div>
    <div class="col-12 col-md-2">
        <button onclick="setcostss()" class="btn btn-primary">Изменить</button>
    </div>
</div>
</div>

<div class="row m-1">
    <div class="control-wrapper col col-md-12">
        <ejs-grid id="Grid" actionComplete="actioncomp"allowPaging="true" actionFailure="actionfail" locale="ru-RU" gridLines="Both" allowResizing="true" allowFiltering="true"  allowSorting="true" height="500" toolbar="@(new List<string>() {"Add", "Edit", "Delete", "Cancel", "Update"})">
            <e-grid-editSettings mode="Normal" newRowPosition="Top" allowAdding="true" allowDeleting="true" allowEditing="true" showDeleteConfirmDialog="true"></e-grid-editSettings>
            <e-grid-pageSettings pageCount="7" pageSize="50" ></e-grid-pageSettings>

            <e-data-manager url="/ProductIncoms/Setting" insertUrl="/ProductIncoms/Insert" updateUrl="/ProductIncoms/Update" removeUrl="/ProductIncoms/Delete" adaptor="UrlAdaptor"></e-data-manager>
            <e-grid-columns>
                <e-grid-column field="Id" type="number" visible="false" headerTextAlign="Center" defaultValue="0" isPrimaryKey="true" isIdentity="true" headerText="ID"></e-grid-column>
                <e-grid-column field="ProductId" allowEditing="false" validationRules="@(new { required=true})" headerText="Продукт" dataSource="@(new Syncfusion.EJ2.DataManager() { Url = "/Product/ForDropDown", Adaptor = "UrlAdaptor"})" foreignKeyField="Id" foreignKeyValue="Name" edit="@(new {@params = DropDownList} )" editType="dropdownedit" minWidth="50" customAttributes=@(new { @class="orientationcss" } ) headerTextAlign="Center" textAlign="Left"></e-grid-column>
                <e-grid-column field="Amount" allowEditing="false" type="number" width="100px" headerText="Количество" minWidth="50" customAttributes=@(new { @class="orientationcss" } ) headerTextAlign="Center" validationRules="@(new { required=true})" textAlign="Center"></e-grid-column>
                <e-grid-column field="IncomeCost" type="number" width="120px" validationRules="@(new { required=true})" minWidth="50" headerText="Входящая Цена" customAttributes=@(new { @class="orientationcss" } ) headerTextAlign="Center" textAlign="Center"></e-grid-column>
                <e-grid-column field="SaleCost" type="number" width="100px" validationRules="@(new { required=true})" minWidth="50" headerText="Цена" customAttributes=@(new { @class="orientationcss" } ) headerTextAlign="Center" textAlign="Center"></e-grid-column>
                <e-grid-column field="OptCost" type="number" width="120px" validationRules="@(new { required=true})" minWidth="50" headerText="Отповая цена" customAttributes=@(new { @class="orientationcss" } ) headerTextAlign="Center" textAlign="Center"></e-grid-column>
                <e-grid-column field="RegDt" type="date" format="dd.MM.yyyy" width="150px" allowEditing="false" minWidth="50" headerText="Дата Регистр" customAttributes=@(new { @class="orientationcss" } ) headerTextAlign="Center" textAlign="Center"></e-grid-column>
                <e-grid-column field="SupplierId" headerText="Поставщик" dataSource="@(new Syncfusion.EJ2.DataManager() { Url = "/Suppliers/ForDropDown", Adaptor = "UrlAdaptor"})" foreignKeyField="Id" foreignKeyValue="Name" edit="new {@params = DropDownList} " editType="dropdownedit" minWidth="50" customAttributes=@(new { @class="orientationcss" } ) headerTextAlign="Center" textAlign="Center"></e-grid-column>
                <e-grid-column field="Comments" minWidth="50" headerText="Комментарии" customAttributes=@(new { @class="orientationcss" } ) headerTextAlign="Center" textAlign="Center"></e-grid-column>
            </e-grid-columns>
        </ejs-grid>
    </div>
</div>
<partial name="~/Views/Partials/NotifyView.cshtml" />
<script type="text/javascript">
    var toastObj;
    var toasts = [
        { title: 'Предупреждение!', content: 'There was a problem with your network connection.', cssClass: 'e-toast-warning', icon: 'e-warning toast-icons' },
        { title: 'Успех!', content: 'Успешно Сохранено!', cssClass: 'e-toast-success', icon: 'e-success toast-icons' },
        { title: 'Ошибка!', content: 'Произошло ошибка c соединениями', cssClass: 'e-toast-danger', icon: 'e-error toast-icons' },
        { title: 'Информация!', content: 'Please read the comments carefully.', cssClass: 'e-toast-info', icon: 'e-info toast-icons' }];

    setTimeout(
        () => {

        }, 800);
    function creatednotify() {
        toastObj = this;
    }
    function actioncomp(args) {
        if (args.requestType == "save")
            toastObj.show(toasts[1]);
    }
    function actionfail(args) {
        toastObj.show({ title: 'Предупреждение!', content: args.error[0].error.responseText, cssClass: 'e-toast-warning', icon: 'e-warning toast-icons' });
    }
    function setcostss(){
        var prtype = document.getElementById('Prsfs').ej2_instances[0].value;
        var incmm = document.getElementById('incmm').ej2_instances[0].value;
        var rzncst = document.getElementById('rzncst').ej2_instances[0].value;
        var optcst = document.getElementById('optcst').ej2_instances[0].value;
        if (prtype == null || incmm == null || rzncst == null || optcst == null) {
            toastObj.show({ title: 'Предупреждение!', content:"Заполните все поля", cssClass: 'e-toast-warning', icon: 'e-warning toast-icons' });
            return;
        }
        var dataa = { "ProductTypeId": prtype, "IncomeCost": incmm, "SaleCost": rzncst, "OptCost": optcst}
        $.ajax({
            type: "POST",
            url: "/ProductIncoms/InsertCosts",
            data: dataa,
            success: function (data) {
                toastObj.show({ title: 'Успех!', content: data, cssClass: 'e-toast-success', icon: 'e-success toast-icons' });
                document.getElementById('Grid').ej2_instances[0].refresh();
            },
            error: function (request, error) {
                toastObj.show({ title: 'Предупреждение!', content: "Ошибка сети", cssClass: 'e-toast-warning', icon: 'e-warning toast-icons' });
            }
        });
    }

</script>

@section Scripts{

    <style>
        .orientationcss .e-headercelldiv {
            position: relative;
            color: black;
            font-size: 16px;
        }
    </style>
    <style>
        .e-float-input.e-numeric.e-input-group {
            margin-top: 40px;
        }

        #errorMessage {
            color: red;
            text-align: center
        }

        #submitbutton {
            margin: 10px auto;
            text-align: center;
        }
    </style>


}

